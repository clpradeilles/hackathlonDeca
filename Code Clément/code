/**
 * Grab the ball and try to throw it through the opponent's goal!
 * Move towards the ball and use your team id to determine where you need to throw it.
 **/

var myTeamId = parseInt(readline()); // if 0 you need to score on the right of the map, if 1 you need to score on the left

// game loop
var startingBallisInitialized = false;
while (true) {
    var tab = [];
    var entities = parseInt(readline()); // number of entities still in game
    for (var i = 0; i < entities; i++) {
        var inputs = readline().split(' ');
        var entityId = parseInt(inputs[0]); // entity identifier
        var entityType = inputs[1]; // "FOOTBALLER", "OPPONENT" or "BALL"
        var x = parseInt(inputs[2]); // position
        var y = parseInt(inputs[3]); // position
        var vx = parseInt(inputs[4]); // velocity
        var vy = parseInt(inputs[5]); // velocity
        var state = parseInt(inputs[6]); // 1 if the footballer is holding the ball, 0 otherwise
        tab.push(inputs)
    }
    if (startingBallisInitialized === false){
        startingBallisInitialized = true;
        var startingBall = [tab[8][2],tab[8][3]];
        var lastPos = startingBall;
    }// fonction pour initialiser la position intiale de la ball ne s'opÃ¨re qu'une seule fois
       
       var equationBall = droiteEquationTrajectoireBall();
        // To debug: printErr('Debug messages...');
        if (myTeamId === 0){
            defenseurMove0();
            recuperateurMove0(1);
            recuperateurMove0(2);
            recuperateurMove0(3);
        }
        else {
            defenseurMove1();
            recuperateurMove1(1);
            recuperateurMove1(2);
            recuperateurMove1(3);
        }
}

function recuperateurMove0(id){
    var myDistanceToBall = Math.sqrt( Math.pow((tab[id][2]-tab[8][2]), 2) + Math.pow((tab[id][3]-tab[8][3]), 2));
    if (tab[id][6] == 1) //cas ou il a grab la balle
        print('THROW 16000 5250 500');
    else {
        if(myDistanceToBall < distanceAdversairePlusProcheDeLaBalle()){
            print('MOVE ' + tab[8][2] + ' ' + tab[8][3] + ' 100');
        }
        else {
            print('MOVE ' + tab[8][2] + ' ' + tab[8][3] + ' 150');
        }
    }
}

function defenseurMove0(){
    var myDistanceToBall = Math.sqrt( Math.pow((tab[0][2]-tab[8][2]), 2) + Math.pow((tab[0][3]-tab[8][3]), 2));
    if (tab[0][6] == 1)//cas ou il grab la balle
        print('THROW 16000 3750 500');
    else {
        if (myDistanceToBall < distanceAdversairePlusProcheDeLaBalle())// cas ou il est plus proched de la balle que adversaire
            print('MOVE ' + tab[8][2] + ' ' + tab[8][3] + ' 150');
        else {
            if (tab[8][2] > 7000){
                print('MOVE 2000 3750 100');
            }
            else {
                if (trajectoireDangereuse(equationBall)){//cas ou il n'est pas le plus proche de la balle et la trajectoire est dangereuse
                       print('MOVE ' + tab[8][2] + ' ' + Math.round((equationBall[0] * 2000 + equationBall[1])) + ' 100'); 
                    }
                    else {// cas ou la trajectoire non dangereuse et pas le plus proche
                       print('MOVE 2000 3750 100'); 
                    }
                }
        }
    }
}

function recuperateurMove1(id){
    var myDistanceToBall = Math.sqrt( Math.pow((tab[id][2]-tab[8][2]), 2) + Math.pow((tab[id][3]-tab[8][3]), 2));
    if (tab[1][6] == 1)
        print('THROW 0 5250 500');
    else {
        if(myDistanceToBall < distanceAdversairePlusProcheDeLaBalle()){
            print('MOVE ' + tab[8][2] + ' ' + tab[8][3] + ' 100');
        }
        else {
            print('MOVE ' + tab[8][2] + ' ' + tab[8][3] + ' 150');
        }
    }
}

function defenseurMove1(){
    var myDistanceToBall = Math.sqrt( Math.pow((tab[0][2]-tab[8][2]), 2) + Math.pow((tab[0][3]-tab[8][3]), 2));
    if (tab[0][6] == 1){
        print('THROW 0 3750 500');
    }
    else {
        if((myDistanceToBall < distanceAdversairePlusProcheDeLaBalle()) && (tab[8][2] < 8000)){
            print('MOVE ' + tab[8][2] + ' ' + tab[8][3] + ' 150');
        }
        else { 
            if (tab[8][2] < 8000){
                print('MOVE ' + tab[8][2] + ' ' + tab[8][3] + ' 100');
            }
            else {
                print('MOVE 13500 3750 100');
            }
        }
    }
}

function distanceAdversairePlusProcheDeLaBalle(){
    var dist1 = Math.sqrt( Math.pow((tab[4][2]-tab[8][2]), 2) + Math.pow((tab[4][3]-tab[8][3]), 2));
    var dist2 = Math.sqrt( Math.pow((tab[5][2]-tab[8][2]), 2) + Math.pow((tab[5][3]-tab[8][3]), 2));
    var dist3 = Math.sqrt( Math.pow((tab[6][2]-tab[8][2]), 2) + Math.pow((tab[6][3]-tab[8][3]), 2));
    var dist4 = Math.sqrt( Math.pow((tab[7][2]-tab[8][2]), 2) + Math.pow((tab[7][3]-tab[8][3]), 2));
    return Math.min(dist1,dist2,dist3,dist4);   
}

function droiteEquationTrajectoireBall(){
    a = (tab[8][3] - lastPos[1])/(tab[8][2] - lastPos[0]);
    b = tab[8][3] - a * tab[8][2];
    lastPos[1] = tab[8][3];
    lastPos[0] = tab[8][2];
    return [a,b];
}

function trajectoireDangereuse(equation){
    return (((equation[0] * 0 + equation[1]) < 5250) && (1250 < (equation[0] * 0 + equation[1])))
}
